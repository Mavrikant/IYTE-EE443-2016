
bin\Debug\Lab3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001f0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  00000244  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000032  00000000  00000000  00000264  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000000da  00000000  00000000  00000296  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 0000008b  00000000  00000000  00000370  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000170  00000000  00000000  000003fb  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000040  00000000  00000000  0000056c  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000080  00000000  00000000  000005ac  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 91 00 	call	0x122	; 0x122 <main>
  78:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <mydelay>:
#include <avr/io.h>
#include <util/delay.h>
#define _NOP() do { __asm__ __volatile__ ("nop"); } while (0)


void mydelay(void){
  80:	df 93       	push	r29
  82:	cf 93       	push	r28
  84:	00 d0       	rcall	.+0      	; 0x86 <mydelay+0x6>
  86:	cd b7       	in	r28, 0x3d	; 61
  88:	de b7       	in	r29, 0x3e	; 62
    int i = 0;
  8a:	1a 82       	std	Y+2, r1	; 0x02
  8c:	19 82       	std	Y+1, r1	; 0x01
    for (i = 0; i < 1000; i++) {
  8e:	1a 82       	std	Y+2, r1	; 0x02
  90:	19 82       	std	Y+1, r1	; 0x01
  92:	06 c0       	rjmp	.+12     	; 0xa0 <mydelay+0x20>
        __asm__ volatile ( "NOP" );
  94:	00 00       	nop
#define _NOP() do { __asm__ __volatile__ ("nop"); } while (0)


void mydelay(void){
    int i = 0;
    for (i = 0; i < 1000; i++) {
  96:	89 81       	ldd	r24, Y+1	; 0x01
  98:	9a 81       	ldd	r25, Y+2	; 0x02
  9a:	01 96       	adiw	r24, 0x01	; 1
  9c:	9a 83       	std	Y+2, r25	; 0x02
  9e:	89 83       	std	Y+1, r24	; 0x01
  a0:	89 81       	ldd	r24, Y+1	; 0x01
  a2:	9a 81       	ldd	r25, Y+2	; 0x02
  a4:	23 e0       	ldi	r18, 0x03	; 3
  a6:	88 3e       	cpi	r24, 0xE8	; 232
  a8:	92 07       	cpc	r25, r18
  aa:	a4 f3       	brlt	.-24     	; 0x94 <mydelay+0x14>
        __asm__ volatile ( "NOP" );
    }
}
  ac:	0f 90       	pop	r0
  ae:	0f 90       	pop	r0
  b0:	cf 91       	pop	r28
  b2:	df 91       	pop	r29
  b4:	08 95       	ret

000000b6 <change>:

void change (void){
  b6:	df 93       	push	r29
  b8:	cf 93       	push	r28
  ba:	cd b7       	in	r28, 0x3d	; 61
  bc:	de b7       	in	r29, 0x3e	; 62
    if (( PIND & _BV(PIND1) ) == 0x00){ //SW1  and SW0 pressed (1 clock)
  be:	e9 e2       	ldi	r30, 0x29	; 41
  c0:	f0 e0       	ldi	r31, 0x00	; 0
  c2:	80 81       	ld	r24, Z
  c4:	88 2f       	mov	r24, r24
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	82 70       	andi	r24, 0x02	; 2
  ca:	90 70       	andi	r25, 0x00	; 0
  cc:	00 97       	sbiw	r24, 0x00	; 0
  ce:	a1 f4       	brne	.+40     	; 0xf8 <change+0x42>
        _NOP(); // to make right and left shift time equal.
  d0:	00 00       	nop
        if(PORTB == 0b00000001){ //(1 clock)
  d2:	e5 e2       	ldi	r30, 0x25	; 37
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	80 81       	ld	r24, Z
  d8:	81 30       	cpi	r24, 0x01	; 1
  da:	31 f4       	brne	.+12     	; 0xe8 <change+0x32>
            _NOP();
  dc:	00 00       	nop
            PORTB = 0b10000000;//Turn to start (1 clock)
  de:	e5 e2       	ldi	r30, 0x25	; 37
  e0:	f0 e0       	ldi	r31, 0x00	; 0
  e2:	80 e8       	ldi	r24, 0x80	; 128
  e4:	80 83       	st	Z, r24
  e6:	1a c0       	rjmp	.+52     	; 0x11c <change+0x66>
        }
        else{// + jump (1 clock)
            PORTB= PORTB >> 1;;//shift right (1 clock))
  e8:	a5 e2       	ldi	r26, 0x25	; 37
  ea:	b0 e0       	ldi	r27, 0x00	; 0
  ec:	e5 e2       	ldi	r30, 0x25	; 37
  ee:	f0 e0       	ldi	r31, 0x00	; 0
  f0:	80 81       	ld	r24, Z
  f2:	86 95       	lsr	r24
  f4:	8c 93       	st	X, r24
  f6:	12 c0       	rjmp	.+36     	; 0x11c <change+0x66>
        }

    }
    else{ //SW1 not pressed, SW0 pressed  + jump (1 clock)
        if(PORTB == 0b10000000){ //(1 clock)
  f8:	e5 e2       	ldi	r30, 0x25	; 37
  fa:	f0 e0       	ldi	r31, 0x00	; 0
  fc:	80 81       	ld	r24, Z
  fe:	80 38       	cpi	r24, 0x80	; 128
 100:	31 f4       	brne	.+12     	; 0x10e <change+0x58>
            _NOP();
 102:	00 00       	nop
            PORTB = 0b00000001; //Turn to end (1 clock)
 104:	e5 e2       	ldi	r30, 0x25	; 37
 106:	f0 e0       	ldi	r31, 0x00	; 0
 108:	81 e0       	ldi	r24, 0x01	; 1
 10a:	80 83       	st	Z, r24
 10c:	07 c0       	rjmp	.+14     	; 0x11c <change+0x66>
        }
        else{// + jump (1 clock)
            PORTB= PORTB << 1;//shift left (1 clock)
 10e:	a5 e2       	ldi	r26, 0x25	; 37
 110:	b0 e0       	ldi	r27, 0x00	; 0
 112:	e5 e2       	ldi	r30, 0x25	; 37
 114:	f0 e0       	ldi	r31, 0x00	; 0
 116:	80 81       	ld	r24, Z
 118:	88 0f       	add	r24, r24
 11a:	8c 93       	st	X, r24
        }
    }

}
 11c:	cf 91       	pop	r28
 11e:	df 91       	pop	r29
 120:	08 95       	ret

00000122 <main>:

int main(void){
 122:	df 93       	push	r29
 124:	cf 93       	push	r28
 126:	cd b7       	in	r28, 0x3d	; 61
 128:	de b7       	in	r29, 0x3e	; 62
 12a:	27 97       	sbiw	r28, 0x07	; 7
 12c:	0f b6       	in	r0, 0x3f	; 63
 12e:	f8 94       	cli
 130:	de bf       	out	0x3e, r29	; 62
 132:	0f be       	out	0x3f, r0	; 63
 134:	cd bf       	out	0x3d, r28	; 61
    DDRB |= 0b11111111;// all output
 136:	e4 e2       	ldi	r30, 0x24	; 36
 138:	f0 e0       	ldi	r31, 0x00	; 0
 13a:	80 81       	ld	r24, Z
 13c:	e4 e2       	ldi	r30, 0x24	; 36
 13e:	f0 e0       	ldi	r31, 0x00	; 0
 140:	8f ef       	ldi	r24, 0xFF	; 255
 142:	80 83       	st	Z, r24
    DDRD |= 0b11111100;//0-1 input, others  output
 144:	aa e2       	ldi	r26, 0x2A	; 42
 146:	b0 e0       	ldi	r27, 0x00	; 0
 148:	ea e2       	ldi	r30, 0x2A	; 42
 14a:	f0 e0       	ldi	r31, 0x00	; 0
 14c:	80 81       	ld	r24, Z
 14e:	8c 6f       	ori	r24, 0xFC	; 252
 150:	8c 93       	st	X, r24
    PORTD |= 0b00000011;//Pull-up resistor for inputs
 152:	ab e2       	ldi	r26, 0x2B	; 43
 154:	b0 e0       	ldi	r27, 0x00	; 0
 156:	eb e2       	ldi	r30, 0x2B	; 43
 158:	f0 e0       	ldi	r31, 0x00	; 0
 15a:	80 81       	ld	r24, Z
 15c:	83 60       	ori	r24, 0x03	; 3
 15e:	8c 93       	st	X, r24
    PORTB = 0b00010000; //initiate
 160:	e5 e2       	ldi	r30, 0x25	; 37
 162:	f0 e0       	ldi	r31, 0x00	; 0
 164:	80 e1       	ldi	r24, 0x10	; 16
 166:	80 83       	st	Z, r24
    unsigned int PDsave = 0x00;
 168:	1e 82       	std	Y+6, r1	; 0x06
 16a:	1d 82       	std	Y+5, r1	; 0x05
    unsigned int PDsave_old = 0x00;
 16c:	1c 82       	std	Y+4, r1	; 0x04
 16e:	1b 82       	std	Y+3, r1	; 0x03
    int count = 0;
 170:	1a 82       	std	Y+2, r1	; 0x02
 172:	19 82       	std	Y+1, r1	; 0x01

    while(1){
        PDsave_old = PDsave;
 174:	8d 81       	ldd	r24, Y+5	; 0x05
 176:	9e 81       	ldd	r25, Y+6	; 0x06
 178:	9c 83       	std	Y+4, r25	; 0x04
 17a:	8b 83       	std	Y+3, r24	; 0x03
        PDsave = PIND;
 17c:	e9 e2       	ldi	r30, 0x29	; 41
 17e:	f0 e0       	ldi	r31, 0x00	; 0
 180:	80 81       	ld	r24, Z
 182:	88 2f       	mov	r24, r24
 184:	90 e0       	ldi	r25, 0x00	; 0
 186:	9e 83       	std	Y+6, r25	; 0x06
 188:	8d 83       	std	Y+5, r24	; 0x05

        if(((PDsave_old & 0x01) == 0x01) && ((PDsave & 0x01) == 0x00)){ // 1 to 0 transition at SW0
 18a:	8b 81       	ldd	r24, Y+3	; 0x03
 18c:	9c 81       	ldd	r25, Y+4	; 0x04
 18e:	81 70       	andi	r24, 0x01	; 1
 190:	90 70       	andi	r25, 0x00	; 0
 192:	98 2f       	mov	r25, r24
 194:	81 e0       	ldi	r24, 0x01	; 1
 196:	89 27       	eor	r24, r25
 198:	88 23       	and	r24, r24
 19a:	59 f4       	brne	.+22     	; 0x1b2 <main+0x90>
 19c:	8d 81       	ldd	r24, Y+5	; 0x05
 19e:	9e 81       	ldd	r25, Y+6	; 0x06
 1a0:	81 70       	andi	r24, 0x01	; 1
 1a2:	90 70       	andi	r25, 0x00	; 0
 1a4:	00 97       	sbiw	r24, 0x00	; 0
 1a6:	29 f4       	brne	.+10     	; 0x1b2 <main+0x90>
            change();
 1a8:	0e 94 5b 00 	call	0xb6	; 0xb6 <change>
            count = 0;
 1ac:	1a 82       	std	Y+2, r1	; 0x02
 1ae:	19 82       	std	Y+1, r1	; 0x01
 1b0:	1a c0       	rjmp	.+52     	; 0x1e6 <main+0xc4>
        }
        else if (((PDsave_old & 0x01) == 0x00) && ((PDsave & 0x01) == 0x00)){ // no change 0 - 0
 1b2:	8b 81       	ldd	r24, Y+3	; 0x03
 1b4:	9c 81       	ldd	r25, Y+4	; 0x04
 1b6:	81 70       	andi	r24, 0x01	; 1
 1b8:	90 70       	andi	r25, 0x00	; 0
 1ba:	00 97       	sbiw	r24, 0x00	; 0
 1bc:	a1 f4       	brne	.+40     	; 0x1e6 <main+0xc4>
 1be:	8d 81       	ldd	r24, Y+5	; 0x05
 1c0:	9e 81       	ldd	r25, Y+6	; 0x06
 1c2:	81 70       	andi	r24, 0x01	; 1
 1c4:	90 70       	andi	r25, 0x00	; 0
 1c6:	00 97       	sbiw	r24, 0x00	; 0
 1c8:	71 f4       	brne	.+28     	; 0x1e6 <main+0xc4>
           if (count>250){//wait until 250ms
 1ca:	89 81       	ldd	r24, Y+1	; 0x01
 1cc:	9a 81       	ldd	r25, Y+2	; 0x02
 1ce:	8b 3f       	cpi	r24, 0xFB	; 251
 1d0:	91 05       	cpc	r25, r1
 1d2:	24 f0       	brlt	.+8      	; 0x1dc <main+0xba>
                change();
 1d4:	0e 94 5b 00 	call	0xb6	; 0xb6 <change>
                count = 0;
 1d8:	1a 82       	std	Y+2, r1	; 0x02
 1da:	19 82       	std	Y+1, r1	; 0x01
           }
           count++;
 1dc:	89 81       	ldd	r24, Y+1	; 0x01
 1de:	9a 81       	ldd	r25, Y+2	; 0x02
 1e0:	01 96       	adiw	r24, 0x01	; 1
 1e2:	9a 83       	std	Y+2, r25	; 0x02
 1e4:	89 83       	std	Y+1, r24	; 0x01
        }

        mydelay();//1ms
 1e6:	0e 94 40 00 	call	0x80	; 0x80 <mydelay>
 1ea:	c4 cf       	rjmp	.-120    	; 0x174 <main+0x52>

000001ec <_exit>:
 1ec:	f8 94       	cli

000001ee <__stop_program>:
 1ee:	ff cf       	rjmp	.-2      	; 0x1ee <__stop_program>
